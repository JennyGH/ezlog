project(ezlog VERSION 2.0.0 DESCRIPTION "ezlog")

if(MSVC)
    set(VERSIONINFO_RC ${PROJECT_BINARY_DIR}/VersionInfo.rc)
    configure_file(${PROJECT_SOURCE_DIR}/VersionInfo.rc.in ${VERSIONINFO_RC})
endif() # ENDIF MSVC

set(EZLOG_CONFIG_HEADER  ${CMAKE_SOURCE_DIR}/include/ezlog_config.h)
configure_file(${CMAKE_SOURCE_DIR}/include/ezlog_config.h.in ${EZLOG_CONFIG_HEADER})

file(GLOB_RECURSE EXPORTS_FILES
    ${PROJECT_SOURCE_DIR}/*.def
    ${PROJECT_SOURCE_DIR}/*.map
)

file(GLOB_RECURSE CMAKE_TEMPLATE_FILES
    ${CMAKE_SOURCE_DIR}/include/*.in
)

file(GLOB_RECURSE PUBLIC_INCLUDE_FILES
    ${CMAKE_SOURCE_DIR}/include/*.h
    ${EZLOG_CONFIG_HEADER}
)

file(GLOB_RECURSE INCLUDE_FILES
    ${PROJECT_SOURCE_DIR}/*.h
    ${PROJECT_SOURCE_DIR}/*.hpp
    ${PUBLIC_INCLUDE_FILES}
)

file(GLOB_RECURSE SOURCE_FILES
    ${PROJECT_SOURCE_DIR}/*.c
    ${PROJECT_SOURCE_DIR}/*.cpp
)

GROUP_FILES(${INCLUDE_FILES} "Header Files")
GROUP_FILES(${SOURCE_FILES}  "Source Files")

set(BUILD_TYPE STATIC)
if(BUILD_SHARED_LIBS)
    set(BUILD_TYPE SHARED)
endif() # BUILD_SHARED_LIBS

add_library(
    ${PROJECT_NAME}
    ${BUILD_TYPE}
    ${INCLUDE_FILES}
    ${SOURCE_FILES}
    ${EXPORTS_FILES}  # Add export file of C APIs.
    ${VERSIONINFO_RC} # Add version info.
    ${CMAKE_TEMPLATE_FILES}
)

if(CMAKE_CXX_CPPCHECK)
    add_custom_command(
        TARGET ${PROJECT_NAME}
        PRE_BUILD
        COMMAND ${CPPCHECK_COMMAND} ${PROJECT_SOURCE_DIR}
    )
endif() # ENDIF `cppcheck` was found.

if(UNIX AND NOT ANDROID)
    set(LINK_LIBS pthread)
endif() # ENDIF UNIX && !ANDROID

target_include_directories(
    ${PROJECT_NAME}
    PRIVATE ${PROJECT_SOURCE_DIR}
    PRIVATE ${CMAKE_SOURCE_DIR}/include
)

target_link_libraries(
    ${PROJECT_NAME}
    PRIVATE ${LINK_LIBS}
)

install(
    TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)
install(
    FILES ${PUBLIC_INCLUDE_FILES}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})
if(UNIX AND BUILD_SHARED_LIBS)
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "-Wl,--version-script=${PROJECT_SOURCE_DIR}/exports.map")
endif() # ENDIF UNIX && BUILD_SHARED_LIBS