SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
CMAKE_MINIMUM_REQUIRED(VERSION 3.15)

PROJECT(ezlog VERSION 1.1.2)
FIND_PACKAGE(benchmark)

FIND_PROGRAM(CMAKE_CXX_CPPCHECK NAMES cppcheck)

MESSAGE(STATUS "PROJECT INFO:")
MESSAGE(STATUS "    CMAKE_PROJECT_NAME:    ${CMAKE_PROJECT_NAME}")
MESSAGE(STATUS "    CMAKE_BUILD_TYPE:      ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "    CMAKE_SOURCE_DIR:      ${CMAKE_SOURCE_DIR}")
MESSAGE(STATUS "    CMAKE_PROJECT_VERSION: ${CMAKE_PROJECT_VERSION}")

MESSAGE(STATUS "SYSTEM INFO:")
MESSAGE(STATUS "    CMAKE_SYSTEM_NAME:              ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "    CMAKE_SYSTEM_PROCESSOR:         ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "    CMAKE_SIZEOF_VOID_P:            ${CMAKE_SIZEOF_VOID_P}")
MESSAGE(STATUS "    CMAKE_C_COMPILER_ID:            ${CMAKE_C_COMPILER_ID}")
MESSAGE(STATUS "    CMAKE_EXECUTABLE_SUFFIX:        ${CMAKE_EXECUTABLE_SUFFIX}")
MESSAGE(STATUS "    CMAKE_SHARED_LIBRARY_PREFIX:    ${CMAKE_SHARED_LIBRARY_PREFIX}")
MESSAGE(STATUS "    CMAKE_SHARED_LIBRARY_SUFFIX:    ${CMAKE_SHARED_LIBRARY_SUFFIX}")
MESSAGE(STATUS "    CMAKE_STATIC_LIBRARY_PREFIX:    ${CMAKE_STATIC_LIBRARY_PREFIX}")
MESSAGE(STATUS "    CMAKE_STATIC_LIBRARY_SUFFIX:    ${CMAKE_STATIC_LIBRARY_SUFFIX}")
MESSAGE(STATUS "    MSVC:                           ${MSVC}")
MESSAGE(STATUS "    MINGW:                          ${MINGW}")
MESSAGE(STATUS "    WIN32:                          ${WIN32}")
MESSAGE(STATUS "    UNIX:                           ${UNIX}")
MESSAGE(STATUS "    APPLE:                          ${APPLE}")
MESSAGE(STATUS "    IOS:                            ${IOS}")
MESSAGE(STATUS "    ANDROID:                        ${ANDROID}")
MESSAGE(STATUS "    OHOS:                           ${OHOS}")

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY           "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY           "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY           "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG     "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE   "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG     "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE   "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG     "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE   "${CMAKE_BINARY_DIR}/bin")

SET(CPPCHECK_COMMAND cppcheck -j 4 --quiet --enable=warning,performance,portability --library=std --std=c++11)
IF(MSVC)
    SET(CPPCHECK_COMMAND ${CPPCHECK_COMMAND} --template=vs)
ENDIF()

SET(CMAKE_INSTALL_BINDIR        ${CMAKE_INSTALL_PREFIX}/bin)
SET(CMAKE_INSTALL_LIBDIR        ${CMAKE_INSTALL_PREFIX}/lib)
SET(CMAKE_INSTALL_INCLUDEDIR    ${CMAKE_INSTALL_PREFIX}/include)
# SET(CMAKE_MSVC_RUNTIME_LIBRARY  "MultiThreaded$<$<CONFIG:Debug>:Debug>")

SET(BUILD_SHARED FALSE CACHE BOOL "Build shared library.")
SET(BUILD_TEST   FALSE CACHE BOOL "Build test.")

# Add platform macros.
IF(MSVC)
    ADD_DEFINITIONS(-DMSVC=1)
ENDIF()
IF(MINGW)
    ADD_DEFINITIONS(-DMINGW=1)
ENDIF()
IF(WIN32)
    ADD_DEFINITIONS(-DWIN32=1)
ENDIF()
IF(UNIX)
    ADD_DEFINITIONS(-DUNIX=1)
ENDIF()
IF(APPLE)
    ADD_DEFINITIONS(-DOSX=1)
    ADD_DEFINITIONS(-DAPPLE=1)
ENDIF()
IF(IOS)
    ADD_DEFINITIONS(-DIOS=1)
ENDIF()
IF(ANDROID)
    ADD_DEFINITIONS(-DANDROID=1)
ENDIF()
IF(OHOS)
    ADD_DEFINITIONS(-DOHOS=1)
ENDIF()

# Set some usual flags of different compiler.
IF(MSVC)
    SET(CMAKE_C_FLAGS                  "${CMAKE_C_FLAGS}   /MP /utf-8")
    SET(CMAKE_CXX_FLAGS                "${CMAKE_CXX_FLAGS} /MP /utf-8")
ELSE()
    SET(CMAKE_C_FLAGS                  "${CMAKE_C_FLAGS}   -fPIC")
    SET(CMAKE_CXX_FLAGS                "${CMAKE_CXX_FLAGS} -fPIC")
    SET(CMAKE_CXX_FLAGS_DEBUG          "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall -ggdb")
    SET(CMAKE_CXX_FLAGS_RELEASE        "${CMAKE_CXX_FLAGS_RELEASE} -s")
ENDIF() # ENDIF MSVC

# Add C/C++ Macros
ADD_DEFINITIONS(
# You can add macro definition directory here, like:
#   -DTEST_DEFNITION=1 # ==> #define TEST_DEFNITION 1
    -DPROJECT_ROOT="${CMAKE_SOURCE_DIR}"
)

INCLUDE_DIRECTORIES(
# You can add include directory here, like:
#   ${CMAKE_SOURCE_DIR}/3rd/xxxlib/include
  ${CMAKE_SOURCE_DIR}/include
)

# Add link directories
LINK_DIRECTORIES(
# You can add link directory here, like:
#   ${CMAKE_SOURCE_DIR}/3rd/xxxlib/lib
)

# Add sub dirctories.
ADD_SUBDIRECTORY(src)
IF(${BUILD_TEST})
    ADD_SUBDIRECTORY(test)
ENDIF() # ENDIF BUILD_TEST
ADD_SUBDIRECTORY(example)
IF(benchmark_FOUND)
    IF(${BUILD_BENCHMARK_TEST})
        ADD_SUBDIRECTORY(benchmark)
    ENDIF() # ENDIF BUILD_BENCHMARK_TEST
ENDIF() # ENDIF benchmark_FOUND

SET_TARGET_PROPERTIES(${PRJ_TARGET} PROPERTIES FOLDER "CMakePredefinedTargets")
